{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\VS\\\\ChatBot Complete\\\\ChatBot Complete\\\\src\\\\SendMail.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState } from 'react';\nconst {\n  sendEmail,\n  email\n} = require('./server');\nconst SendMail = () => {\n  // const [email, setEmail] = useState('');\n  // const [message, setMessage] = useState('');\n\n  const handleSendEmail = async () => {\n    try {\n      const response = await fetch('/send-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          to: email\n        })\n      });\n      const result = await response.json();\n      if (response.status === 200) {\n        setMessage(result.message);\n      } else {\n        setMessage('Failed to send email');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessage('Error sending email');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Send Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      placeholder: \"Enter recipient's email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendEmail,\n      children: \"Send Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_c = SendMail;\nexport default SendMail;\nvar _c;\n$RefreshReg$(_c, \"SendMail\");","map":{"version":3,"names":["sendEmail","email","require","SendMail","handleSendEmail","response","fetch","method","headers","body","JSON","stringify","to","result","json","status","setMessage","message","error","console","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","setEmail","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/VS/ChatBot Complete/ChatBot Complete/src/SendMail.js"],"sourcesContent":["// import React, { useState } from 'react';\r\nconst {sendEmail,email} = require ('./server');\r\nconst SendMail = () => {\r\n    // const [email, setEmail] = useState('');\r\n    // const [message, setMessage] = useState('');\r\n\r\n    const handleSendEmail = async () => {\r\n        try {\r\n            const response = await fetch('/send-email', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ to: email }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.status === 200) {\r\n                setMessage(result.message);\r\n            } else {\r\n                setMessage('Failed to send email');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            setMessage('Error sending email');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Send Email</h2>\r\n            <input\r\n                type=\"email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                placeholder=\"Enter recipient's email\"\r\n            />\r\n            <button onClick={handleSendEmail}>Send Email</button>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SendMail;\r\n"],"mappings":";;AAAA;AACA,MAAM;EAACA,SAAS;EAACC;AAAK,CAAC,GAAGC,OAAO,CAAE,UAAU,CAAC;AAC9C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACnB;EACA;;EAEA,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;QACxCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,EAAE,EAAEX;QAAM,CAAC;MACtC,CAAC,CAAC;MAEF,MAAMY,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAEpC,IAAIT,QAAQ,CAACU,MAAM,KAAK,GAAG,EAAE;QACzBC,UAAU,CAACH,MAAM,CAACI,OAAO,CAAC;MAC9B,CAAC,MAAM;QACHD,UAAU,CAAC,sBAAsB,CAAC;MACtC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BF,UAAU,CAAC,qBAAqB,CAAC;IACrC;EACJ,CAAC;EAED,oBACII,OAAA;IAAAC,QAAA,gBACID,OAAA;MAAAC,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBL,OAAA;MACIM,IAAI,EAAC,OAAO;MACZC,KAAK,EAAE1B,KAAM;MACb2B,QAAQ,EAAGC,CAAC,IAAKC,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAE;MAC1CK,WAAW,EAAC;IAAyB;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACFL,OAAA;MAAQa,OAAO,EAAE7B,eAAgB;MAAAiB,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACpDR,OAAO,iBAAIG,OAAA;MAAAC,QAAA,EAAIJ;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEd,CAAC;AAACS,EAAA,GAxCI/B,QAAQ;AA0Cd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}