{"ast":null,"code":"'use strict';\n\nconst Mailer = require('./mailer');\nconst shared = require('./shared');\nconst SMTPPool = require('./smtp-pool');\nconst SMTPTransport = require('./smtp-transport');\nconst SendmailTransport = require('./sendmail-transport');\nconst StreamTransport = require('./stream-transport');\nconst JSONTransport = require('./json-transport');\nconst SESTransport = require('./ses-transport');\nconst nmfetch = require('./fetch');\nconst packageData = require('../package.json');\nconst ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\\/+$/, '');\nconst ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\\/+$/, '');\nconst ETHEREAL_API_KEY = (process.env.ETHEREAL_API_KEY || '').replace(/\\s*/g, '') || null;\nconst ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());\nlet testAccount = false;\nmodule.exports.createTransport = function (transporter, defaults) {\n  let urlConfig;\n  let options;\n  let mailer;\n  if (\n  // provided transporter is a configuration object, not transporter plugin\n  typeof transporter === 'object' && typeof transporter.send !== 'function' ||\n  // provided transporter looks like a connection url\n  typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter)) {\n    if (urlConfig = typeof transporter === 'string' ? transporter : transporter.url) {\n      // parse a configuration URL into configuration options\n      options = shared.parseConnectionUrl(urlConfig);\n    } else {\n      options = transporter;\n    }\n    if (options.pool) {\n      transporter = new SMTPPool(options);\n    } else if (options.sendmail) {\n      transporter = new SendmailTransport(options);\n    } else if (options.streamTransport) {\n      transporter = new StreamTransport(options);\n    } else if (options.jsonTransport) {\n      transporter = new JSONTransport(options);\n    } else if (options.SES) {\n      transporter = new SESTransport(options);\n    } else {\n      transporter = new SMTPTransport(options);\n    }\n  }\n  mailer = new Mailer(transporter, options, defaults);\n  return mailer;\n};\nmodule.exports.createTestAccount = function (apiUrl, callback) {\n  let promise;\n  if (!callback && typeof apiUrl === 'function') {\n    callback = apiUrl;\n    apiUrl = false;\n  }\n  if (!callback) {\n    promise = new Promise((resolve, reject) => {\n      callback = shared.callbackPromise(resolve, reject);\n    });\n  }\n  if (ETHEREAL_CACHE && testAccount) {\n    setImmediate(() => callback(null, testAccount));\n    return promise;\n  }\n  apiUrl = apiUrl || ETHEREAL_API;\n  let chunks = [];\n  let chunklen = 0;\n  let requestHeaders = {};\n  let requestBody = {\n    requestor: packageData.name,\n    version: packageData.version\n  };\n  if (ETHEREAL_API_KEY) {\n    requestHeaders.Authorization = 'Bearer ' + ETHEREAL_API_KEY;\n  }\n  let req = nmfetch(apiUrl + '/user', {\n    contentType: 'application/json',\n    method: 'POST',\n    headers: requestHeaders,\n    body: Buffer.from(JSON.stringify(requestBody))\n  });\n  req.on('readable', () => {\n    let chunk;\n    while ((chunk = req.read()) !== null) {\n      chunks.push(chunk);\n      chunklen += chunk.length;\n    }\n  });\n  req.once('error', err => callback(err));\n  req.once('end', () => {\n    let res = Buffer.concat(chunks, chunklen);\n    let data;\n    let err;\n    try {\n      data = JSON.parse(res.toString());\n    } catch (E) {\n      err = E;\n    }\n    if (err) {\n      return callback(err);\n    }\n    if (data.status !== 'success' || data.error) {\n      return callback(new Error(data.error || 'Request failed'));\n    }\n    delete data.status;\n    testAccount = data;\n    callback(null, testAccount);\n  });\n  return promise;\n};\nmodule.exports.getTestMessageUrl = function (info) {\n  if (!info || !info.response) {\n    return false;\n  }\n  let infoProps = new Map();\n  info.response.replace(/\\[([^\\]]+)\\]$/, (m, props) => {\n    props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, (m, key, value) => {\n      infoProps.set(key, value);\n    });\n  });\n  if (infoProps.has('STATUS') && infoProps.has('MSGID')) {\n    return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');\n  }\n  return false;\n};","map":{"version":3,"names":["Mailer","require","shared","SMTPPool","SMTPTransport","SendmailTransport","StreamTransport","JSONTransport","SESTransport","nmfetch","packageData","ETHEREAL_API","process","env","replace","ETHEREAL_WEB","ETHEREAL_API_KEY","ETHEREAL_CACHE","includes","toString","trim","toLowerCase","testAccount","module","exports","createTransport","transporter","defaults","urlConfig","options","mailer","send","test","url","parseConnectionUrl","pool","sendmail","streamTransport","jsonTransport","SES","createTestAccount","apiUrl","callback","promise","Promise","resolve","reject","callbackPromise","setImmediate","chunks","chunklen","requestHeaders","requestBody","requestor","name","version","Authorization","req","contentType","method","headers","body","Buffer","from","JSON","stringify","on","chunk","read","push","length","once","err","res","concat","data","parse","E","status","error","Error","getTestMessageUrl","info","response","infoProps","Map","m","props","key","value","set","has","web","get"],"sources":["C:/Users/dell/Desktop/VS/ChatBot Complete/ChatBot Complete/node_modules/nodemailer/lib/nodemailer.js"],"sourcesContent":["'use strict';\n\nconst Mailer = require('./mailer');\nconst shared = require('./shared');\nconst SMTPPool = require('./smtp-pool');\nconst SMTPTransport = require('./smtp-transport');\nconst SendmailTransport = require('./sendmail-transport');\nconst StreamTransport = require('./stream-transport');\nconst JSONTransport = require('./json-transport');\nconst SESTransport = require('./ses-transport');\nconst nmfetch = require('./fetch');\nconst packageData = require('../package.json');\n\nconst ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\\/+$/, '');\nconst ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\\/+$/, '');\nconst ETHEREAL_API_KEY = (process.env.ETHEREAL_API_KEY || '').replace(/\\s*/g, '') || null;\nconst ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());\n\nlet testAccount = false;\n\nmodule.exports.createTransport = function (transporter, defaults) {\n    let urlConfig;\n    let options;\n    let mailer;\n\n    if (\n        // provided transporter is a configuration object, not transporter plugin\n        (typeof transporter === 'object' && typeof transporter.send !== 'function') ||\n        // provided transporter looks like a connection url\n        (typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter))\n    ) {\n        if ((urlConfig = typeof transporter === 'string' ? transporter : transporter.url)) {\n            // parse a configuration URL into configuration options\n            options = shared.parseConnectionUrl(urlConfig);\n        } else {\n            options = transporter;\n        }\n\n        if (options.pool) {\n            transporter = new SMTPPool(options);\n        } else if (options.sendmail) {\n            transporter = new SendmailTransport(options);\n        } else if (options.streamTransport) {\n            transporter = new StreamTransport(options);\n        } else if (options.jsonTransport) {\n            transporter = new JSONTransport(options);\n        } else if (options.SES) {\n            transporter = new SESTransport(options);\n        } else {\n            transporter = new SMTPTransport(options);\n        }\n    }\n\n    mailer = new Mailer(transporter, options, defaults);\n\n    return mailer;\n};\n\nmodule.exports.createTestAccount = function (apiUrl, callback) {\n    let promise;\n\n    if (!callback && typeof apiUrl === 'function') {\n        callback = apiUrl;\n        apiUrl = false;\n    }\n\n    if (!callback) {\n        promise = new Promise((resolve, reject) => {\n            callback = shared.callbackPromise(resolve, reject);\n        });\n    }\n\n    if (ETHEREAL_CACHE && testAccount) {\n        setImmediate(() => callback(null, testAccount));\n        return promise;\n    }\n\n    apiUrl = apiUrl || ETHEREAL_API;\n\n    let chunks = [];\n    let chunklen = 0;\n\n    let requestHeaders = {};\n    let requestBody = {\n        requestor: packageData.name,\n        version: packageData.version\n    };\n\n    if (ETHEREAL_API_KEY) {\n        requestHeaders.Authorization = 'Bearer ' + ETHEREAL_API_KEY;\n    }\n\n    let req = nmfetch(apiUrl + '/user', {\n        contentType: 'application/json',\n        method: 'POST',\n        headers: requestHeaders,\n        body: Buffer.from(JSON.stringify(requestBody))\n    });\n\n    req.on('readable', () => {\n        let chunk;\n        while ((chunk = req.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n\n    req.once('error', err => callback(err));\n\n    req.once('end', () => {\n        let res = Buffer.concat(chunks, chunklen);\n        let data;\n        let err;\n        try {\n            data = JSON.parse(res.toString());\n        } catch (E) {\n            err = E;\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (data.status !== 'success' || data.error) {\n            return callback(new Error(data.error || 'Request failed'));\n        }\n        delete data.status;\n        testAccount = data;\n        callback(null, testAccount);\n    });\n\n    return promise;\n};\n\nmodule.exports.getTestMessageUrl = function (info) {\n    if (!info || !info.response) {\n        return false;\n    }\n\n    let infoProps = new Map();\n    info.response.replace(/\\[([^\\]]+)\\]$/, (m, props) => {\n        props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, (m, key, value) => {\n            infoProps.set(key, value);\n        });\n    });\n\n    if (infoProps.has('STATUS') && infoProps.has('MSGID')) {\n        return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');\n    }\n\n    return false;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}